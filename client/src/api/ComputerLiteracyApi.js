/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComputerLiteracy from '../model/ComputerLiteracy';

/**
* ComputerLiteracy service.
* @module api/ComputerLiteracyApi
* @version 1.0.0
*/
export default class ComputerLiteracyApi {

    /**
    * Constructs a new ComputerLiteracyApi. 
    * @alias module:api/ComputerLiteracyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComputerLiteracy operation.
     * @callback module:api/ComputerLiteracyApi~createComputerLiteracyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputerLiteracy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create ComputerLiteracy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:model/ComputerLiteracy} computerLiteracy Body of executive summaries as a object that needs to be added to entity ComputerLiteracy.
     * @param {module:api/ComputerLiteracyApi~createComputerLiteracyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputerLiteracy}
     */
    createComputerLiteracy(employeeId, authorization, computerLiteracy, callback) {
      let postBody = computerLiteracy;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createComputerLiteracy");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createComputerLiteracy");
      }
      // verify the required parameter 'computerLiteracy' is set
      if (computerLiteracy === undefined || computerLiteracy === null) {
        throw new Error("Missing the required parameter 'computerLiteracy' when calling createComputerLiteracy");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ComputerLiteracy;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComputerLiteracy operation.
     * @callback module:api/ComputerLiteracyApi~deleteComputerLiteracyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete computerLiteracy.
     * @param {String} employeeId 
     * @param {String} computerLiteracyId 
     * @param {String} authorization 
     * @param {module:api/ComputerLiteracyApi~deleteComputerLiteracyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteComputerLiteracy(employeeId, computerLiteracyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteComputerLiteracy");
      }
      // verify the required parameter 'computerLiteracyId' is set
      if (computerLiteracyId === undefined || computerLiteracyId === null) {
        throw new Error("Missing the required parameter 'computerLiteracyId' when calling deleteComputerLiteracy");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteComputerLiteracy");
      }

      let pathParams = {
        'employeeId': employeeId,
        'computerLiteracyId': computerLiteracyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies/{ComputerLiteracyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComputerLiteracy operation.
     * @callback module:api/ComputerLiteracyApi~getComputerLiteracyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputerLiteracy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specfic computer literacy.
     * @param {String} employeeId 
     * @param {String} computerLiteracyId 
     * @param {String} authorization 
     * @param {module:api/ComputerLiteracyApi~getComputerLiteracyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputerLiteracy}
     */
    getComputerLiteracy(employeeId, computerLiteracyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getComputerLiteracy");
      }
      // verify the required parameter 'computerLiteracyId' is set
      if (computerLiteracyId === undefined || computerLiteracyId === null) {
        throw new Error("Missing the required parameter 'computerLiteracyId' when calling getComputerLiteracy");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getComputerLiteracy");
      }

      let pathParams = {
        'employeeId': employeeId,
        'computerLiteracyId': computerLiteracyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputerLiteracy;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies/{ComputerLiteracyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listComputerLiteracies operation.
     * @callback module:api/ComputerLiteracyApi~listComputerLiteraciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ComputerLiteracy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all items of ComputerLiteracy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [softwareApplication] 
     * @param {String} [level] 
     * @param {module:api/ComputerLiteracyApi~listComputerLiteraciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ComputerLiteracy>}
     */
    listComputerLiteracies(employeeId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling listComputerLiteracies");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listComputerLiteracies");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
        'SoftwareApplication': opts['softwareApplication'],
        'Level': opts['level']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ComputerLiteracy];
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsComputerLiteracies operation.
     * @callback module:api/ComputerLiteracyApi~optionsComputerLiteraciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/ComputerLiteracyApi~optionsComputerLiteraciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsComputerLiteracies(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsComputerLiteracies");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsComputerLiteracies");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsComputerLiteracyId operation.
     * @callback module:api/ComputerLiteracyApi~optionsComputerLiteracyIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} computerLiteracyId 
     * @param {String} authorization 
     * @param {module:api/ComputerLiteracyApi~optionsComputerLiteracyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsComputerLiteracyId(employeeId, computerLiteracyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsComputerLiteracyId");
      }
      // verify the required parameter 'computerLiteracyId' is set
      if (computerLiteracyId === undefined || computerLiteracyId === null) {
        throw new Error("Missing the required parameter 'computerLiteracyId' when calling optionsComputerLiteracyId");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsComputerLiteracyId");
      }

      let pathParams = {
        'employeeId': employeeId,
        'computerLiteracyId': computerLiteracyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies/{ComputerLiteracyId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComputerLiteracy operation.
     * @callback module:api/ComputerLiteracyApi~updateComputerLiteracyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputerLiteracy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update computer literacy.
     * @param {String} employeeId 
     * @param {String} computerLiteracyId 
     * @param {String} authorization 
     * @param {module:model/ComputerLiteracy} computerLiteracy Body of computerLiteracy as an object that needs to be updated to entity ComputerLiteracy.
     * @param {module:api/ComputerLiteracyApi~updateComputerLiteracyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputerLiteracy}
     */
    updateComputerLiteracy(employeeId, computerLiteracyId, authorization, computerLiteracy, callback) {
      let postBody = computerLiteracy;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateComputerLiteracy");
      }
      // verify the required parameter 'computerLiteracyId' is set
      if (computerLiteracyId === undefined || computerLiteracyId === null) {
        throw new Error("Missing the required parameter 'computerLiteracyId' when calling updateComputerLiteracy");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateComputerLiteracy");
      }
      // verify the required parameter 'computerLiteracy' is set
      if (computerLiteracy === undefined || computerLiteracy === null) {
        throw new Error("Missing the required parameter 'computerLiteracy' when calling updateComputerLiteracy");
      }

      let pathParams = {
        'employeeId': employeeId,
        'computerLiteracyId': computerLiteracyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ComputerLiteracy;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/computer-literacies/{ComputerLiteracyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
