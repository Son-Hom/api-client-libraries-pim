/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Language from '../model/Language';

/**
* Language service.
* @module api/LanguageApi
* @version 1.0.0
*/
export default class LanguageApi {

    /**
    * Constructs a new LanguageApi. 
    * @alias module:api/LanguageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLanguage operation.
     * @callback module:api/LanguageApi~createLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Language} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Language.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:model/Language} language Body of executive summaries as a object that needs to be added to entity Language.
     * @param {module:api/LanguageApi~createLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Language}
     */
    createLanguage(employeeId, authorization, language, callback) {
      let postBody = language;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createLanguage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createLanguage");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Language;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLanguage operation.
     * @callback module:api/LanguageApi~deleteLanguageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete language.
     * @param {String} employeeId 
     * @param {String} languageId 
     * @param {String} authorization 
     * @param {module:api/LanguageApi~deleteLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLanguage(employeeId, languageId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteLanguage");
      }
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling deleteLanguage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteLanguage");
      }

      let pathParams = {
        'employeeId': employeeId,
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages/{languageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLanguage operation.
     * @callback module:api/LanguageApi~getLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Language} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specfic language.
     * @param {String} employeeId 
     * @param {String} languageId 
     * @param {String} authorization 
     * @param {module:api/LanguageApi~getLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Language}
     */
    getLanguage(employeeId, languageId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getLanguage");
      }
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling getLanguage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getLanguage");
      }

      let pathParams = {
        'employeeId': employeeId,
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Language;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages/{languageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLanguages operation.
     * @callback module:api/LanguageApi~listLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Language>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all items of language.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [language] 
     * @param {String} [speakingLevel] 
     * @param {String} [writingLevel] 
     * @param {String} [listeningLevel] 
     * @param {String} [readingLevel] 
     * @param {String} [overallLevel] 
     * @param {module:api/LanguageApi~listLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Language>}
     */
    listLanguages(employeeId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling listLanguages");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listLanguages");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
        'Language': opts['language'],
        'SpeakingLevel': opts['speakingLevel'],
        'WritingLevel': opts['writingLevel'],
        'ListeningLevel': opts['listeningLevel'],
        'ReadingLevel': opts['readingLevel'],
        'OverallLevel': opts['overallLevel']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Language];
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsLanguageId operation.
     * @callback module:api/LanguageApi~optionsLanguageIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} languageId 
     * @param {String} authorization 
     * @param {module:api/LanguageApi~optionsLanguageIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsLanguageId(employeeId, languageId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsLanguageId");
      }
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling optionsLanguageId");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsLanguageId");
      }

      let pathParams = {
        'employeeId': employeeId,
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages/{languageId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsLanguages operation.
     * @callback module:api/LanguageApi~optionsLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/LanguageApi~optionsLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsLanguages(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsLanguages");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsLanguages");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLanguage operation.
     * @callback module:api/LanguageApi~updateLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Language} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Language.
     * @param {String} employeeId 
     * @param {String} languageId 
     * @param {String} authorization 
     * @param {module:model/Language} language Body of language as an object that needs to be updated to entity Language.
     * @param {module:api/LanguageApi~updateLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Language}
     */
    updateLanguage(employeeId, languageId, authorization, language, callback) {
      let postBody = language;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateLanguage");
      }
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling updateLanguage");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateLanguage");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling updateLanguage");
      }

      let pathParams = {
        'employeeId': employeeId,
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Language;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/languages/{languageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
