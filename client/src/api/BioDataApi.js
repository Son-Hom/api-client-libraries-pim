/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BioData from '../model/BioData';

/**
* BioData service.
* @module api/BioDataApi
* @version 1.0.0
*/
export default class BioDataApi {

    /**
    * Constructs a new BioDataApi. 
    * @alias module:api/BioDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBioData operation.
     * @callback module:api/BioDataApi~createBioDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BioData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create bio data.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:model/BioData} bioData Body of bio data as a object that needs to be added to entity BioData.
     * @param {module:api/BioDataApi~createBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BioData}
     */
    createBioData(employeeId, authorization, bioData, callback) {
      let postBody = bioData;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createBioData");
      }
      // verify the required parameter 'bioData' is set
      if (bioData === undefined || bioData === null) {
        throw new Error("Missing the required parameter 'bioData' when calling createBioData");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BioData;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBioData operation.
     * @callback module:api/BioDataApi~deleteBioDataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete bio date.
     * @param {String} employeeId 
     * @param {String} bioDataId 
     * @param {String} authorization 
     * @param {module:api/BioDataApi~deleteBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteBioData(employeeId, bioDataId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteBioData");
      }
      // verify the required parameter 'bioDataId' is set
      if (bioDataId === undefined || bioDataId === null) {
        throw new Error("Missing the required parameter 'bioDataId' when calling deleteBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteBioData");
      }

      let pathParams = {
        'employeeId': employeeId,
        'bioDataId': bioDataId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data/{bioDataId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBioData operation.
     * @callback module:api/BioDataApi~getBioDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BioData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specfic bio data.
     * @param {String} employeeId 
     * @param {String} bioDataId 
     * @param {String} authorization 
     * @param {module:api/BioDataApi~getBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BioData}
     */
    getBioData(employeeId, bioDataId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getBioData");
      }
      // verify the required parameter 'bioDataId' is set
      if (bioDataId === undefined || bioDataId === null) {
        throw new Error("Missing the required parameter 'bioDataId' when calling getBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getBioData");
      }

      let pathParams = {
        'employeeId': employeeId,
        'bioDataId': bioDataId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BioData;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data/{bioDataId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBioData operation.
     * @callback module:api/BioDataApi~listBioDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BioData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all items of bio data.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/BioDataApi~listBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BioData>}
     */
    listBioData(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling listBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listBioData");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BioData];
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsBioData operation.
     * @callback module:api/BioDataApi~optionsBioDataCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/BioDataApi~optionsBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsBioData(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsBioData");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsBioDataId operation.
     * @callback module:api/BioDataApi~optionsBioDataIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} bioDataId 
     * @param {String} authorization 
     * @param {module:api/BioDataApi~optionsBioDataIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsBioDataId(employeeId, bioDataId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsBioDataId");
      }
      // verify the required parameter 'bioDataId' is set
      if (bioDataId === undefined || bioDataId === null) {
        throw new Error("Missing the required parameter 'bioDataId' when calling optionsBioDataId");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsBioDataId");
      }

      let pathParams = {
        'employeeId': employeeId,
        'bioDataId': bioDataId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data/{bioDataId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBioData operation.
     * @callback module:api/BioDataApi~updateBioDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BioData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update bio data.
     * @param {String} employeeId 
     * @param {String} bioDataId 
     * @param {String} authorization 
     * @param {module:model/BioData} bioData Body of bio data as a object that needs to be updated to entity BioData.
     * @param {module:api/BioDataApi~updateBioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BioData}
     */
    updateBioData(employeeId, bioDataId, authorization, bioData, callback) {
      let postBody = bioData;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateBioData");
      }
      // verify the required parameter 'bioDataId' is set
      if (bioDataId === undefined || bioDataId === null) {
        throw new Error("Missing the required parameter 'bioDataId' when calling updateBioData");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateBioData");
      }
      // verify the required parameter 'bioData' is set
      if (bioData === undefined || bioData === null) {
        throw new Error("Missing the required parameter 'bioData' when calling updateBioData");
      }

      let pathParams = {
        'employeeId': employeeId,
        'bioDataId': bioDataId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BioData;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/bio-data/{bioDataId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
