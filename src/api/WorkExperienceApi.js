/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WorkExperience from '../model/WorkExperience';

/**
* WorkExperience service.
* @module api/WorkExperienceApi
* @version 1.0.0
*/
export default class WorkExperienceApi {

    /**
    * Constructs a new WorkExperienceApi. 
    * @alias module:api/WorkExperienceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createWorkExperience operation.
     * @callback module:api/WorkExperienceApi~createWorkExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkExperience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create work experience.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:model/WorkExperience} workExperience Body of work experience as a object that needs to be added to entity WorkExperience.
     * @param {module:api/WorkExperienceApi~createWorkExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkExperience}
     */
    createWorkExperience(employeeId, authorization, workExperience, callback) {
      let postBody = workExperience;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createWorkExperience");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createWorkExperience");
      }
      // verify the required parameter 'workExperience' is set
      if (workExperience === undefined || workExperience === null) {
        throw new Error("Missing the required parameter 'workExperience' when calling createWorkExperience");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkExperience;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkExperience operation.
     * @callback module:api/WorkExperienceApi~deleteWorkExperienceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete work experience.
     * @param {String} employeeId 
     * @param {String} workExperienceId 
     * @param {String} authorization 
     * @param {module:api/WorkExperienceApi~deleteWorkExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkExperience(employeeId, workExperienceId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteWorkExperience");
      }
      // verify the required parameter 'workExperienceId' is set
      if (workExperienceId === undefined || workExperienceId === null) {
        throw new Error("Missing the required parameter 'workExperienceId' when calling deleteWorkExperience");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteWorkExperience");
      }

      let pathParams = {
        'employeeId': employeeId,
        'workExperienceId': workExperienceId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences/{workExperienceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkExperience operation.
     * @callback module:api/WorkExperienceApi~getWorkExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkExperience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specfic work experience.
     * @param {String} employeeId 
     * @param {String} workExperienceId 
     * @param {String} authorization 
     * @param {module:api/WorkExperienceApi~getWorkExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkExperience}
     */
    getWorkExperience(employeeId, workExperienceId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getWorkExperience");
      }
      // verify the required parameter 'workExperienceId' is set
      if (workExperienceId === undefined || workExperienceId === null) {
        throw new Error("Missing the required parameter 'workExperienceId' when calling getWorkExperience");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWorkExperience");
      }

      let pathParams = {
        'employeeId': employeeId,
        'workExperienceId': workExperienceId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkExperience;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences/{workExperienceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkExperiences operation.
     * @callback module:api/WorkExperienceApi~listWorkExperiencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WorkExperience>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all items of Work experience.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [fromDate] 
     * @param {String} [toDate] 
     * @param {String} [employer] 
     * @param {String} [positionTitle] 
     * @param {module:api/WorkExperienceApi~listWorkExperiencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WorkExperience>}
     */
    listWorkExperiences(employeeId, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling listWorkExperiences");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listWorkExperiences");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
        'FromDate': opts['fromDate'],
        'ToDate': opts['toDate'],
        'Employer': opts['employer'],
        'PositionTitle': opts['positionTitle']
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkExperience];
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsWorkExperienceId operation.
     * @callback module:api/WorkExperienceApi~optionsWorkExperienceIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} workExperienceId 
     * @param {String} authorization 
     * @param {module:api/WorkExperienceApi~optionsWorkExperienceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsWorkExperienceId(employeeId, workExperienceId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsWorkExperienceId");
      }
      // verify the required parameter 'workExperienceId' is set
      if (workExperienceId === undefined || workExperienceId === null) {
        throw new Error("Missing the required parameter 'workExperienceId' when calling optionsWorkExperienceId");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsWorkExperienceId");
      }

      let pathParams = {
        'employeeId': employeeId,
        'workExperienceId': workExperienceId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences/{workExperienceId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsWorkExperiences operation.
     * @callback module:api/WorkExperienceApi~optionsWorkExperiencesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/WorkExperienceApi~optionsWorkExperiencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsWorkExperiences(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsWorkExperiences");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsWorkExperiences");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkExperience operation.
     * @callback module:api/WorkExperienceApi~updateWorkExperienceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkExperience} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update work experience.
     * @param {String} employeeId 
     * @param {String} workExperienceId 
     * @param {String} authorization 
     * @param {module:model/WorkExperience} workExperience Body of work experience as an object that needs to be updated to entity WorkExperience.
     * @param {module:api/WorkExperienceApi~updateWorkExperienceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkExperience}
     */
    updateWorkExperience(employeeId, workExperienceId, authorization, workExperience, callback) {
      let postBody = workExperience;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateWorkExperience");
      }
      // verify the required parameter 'workExperienceId' is set
      if (workExperienceId === undefined || workExperienceId === null) {
        throw new Error("Missing the required parameter 'workExperienceId' when calling updateWorkExperience");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateWorkExperience");
      }
      // verify the required parameter 'workExperience' is set
      if (workExperience === undefined || workExperience === null) {
        throw new Error("Missing the required parameter 'workExperience' when calling updateWorkExperience");
      }

      let pathParams = {
        'employeeId': employeeId,
        'workExperienceId': workExperienceId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkExperience;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/work-experiences/{workExperienceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
