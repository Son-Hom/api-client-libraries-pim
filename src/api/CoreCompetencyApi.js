/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CoreCompetency from '../model/CoreCompetency';

/**
* CoreCompetency service.
* @module api/CoreCompetencyApi
* @version 1.0.0
*/
export default class CoreCompetencyApi {

    /**
    * Constructs a new CoreCompetencyApi. 
    * @alias module:api/CoreCompetencyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCoreCompetency operation.
     * @callback module:api/CoreCompetencyApi~createCoreCompetencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreCompetency} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create core competency.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:model/CoreCompetency} coreCompetency Body of core competency as a object that needs to be added to entity CoreCompetency.
     * @param {module:api/CoreCompetencyApi~createCoreCompetencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CoreCompetency}
     */
    createCoreCompetency(employeeId, authorization, coreCompetency, callback) {
      let postBody = coreCompetency;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createCoreCompetency");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling createCoreCompetency");
      }
      // verify the required parameter 'coreCompetency' is set
      if (coreCompetency === undefined || coreCompetency === null) {
        throw new Error("Missing the required parameter 'coreCompetency' when calling createCoreCompetency");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CoreCompetency;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCoreCompetency operation.
     * @callback module:api/CoreCompetencyApi~deleteCoreCompetencyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete core competency.
     * @param {String} employeeId 
     * @param {String} coreCompetencyId 
     * @param {String} authorization 
     * @param {module:api/CoreCompetencyApi~deleteCoreCompetencyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCoreCompetency(employeeId, coreCompetencyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling deleteCoreCompetency");
      }
      // verify the required parameter 'coreCompetencyId' is set
      if (coreCompetencyId === undefined || coreCompetencyId === null) {
        throw new Error("Missing the required parameter 'coreCompetencyId' when calling deleteCoreCompetency");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling deleteCoreCompetency");
      }

      let pathParams = {
        'employeeId': employeeId,
        'coreCompetencyId': coreCompetencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies/{coreCompetencyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCoreCompetency operation.
     * @callback module:api/CoreCompetencyApi~getCoreCompetencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreCompetency} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specfic core competency.
     * @param {String} employeeId 
     * @param {String} coreCompetencyId 
     * @param {String} authorization 
     * @param {module:api/CoreCompetencyApi~getCoreCompetencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CoreCompetency}
     */
    getCoreCompetency(employeeId, coreCompetencyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getCoreCompetency");
      }
      // verify the required parameter 'coreCompetencyId' is set
      if (coreCompetencyId === undefined || coreCompetencyId === null) {
        throw new Error("Missing the required parameter 'coreCompetencyId' when calling getCoreCompetency");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getCoreCompetency");
      }

      let pathParams = {
        'employeeId': employeeId,
        'coreCompetencyId': coreCompetencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CoreCompetency;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies/{coreCompetencyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCoreCompetencies operation.
     * @callback module:api/CoreCompetencyApi~listCoreCompetenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CoreCompetency>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all items of core competency.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/CoreCompetencyApi~listCoreCompetenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CoreCompetency>}
     */
    listCoreCompetencies(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling listCoreCompetencies");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listCoreCompetencies");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CoreCompetency];
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsCoreCompetencies operation.
     * @callback module:api/CoreCompetencyApi~optionsCoreCompetenciesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} authorization 
     * @param {module:api/CoreCompetencyApi~optionsCoreCompetenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsCoreCompetencies(employeeId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsCoreCompetencies");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsCoreCompetencies");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the optionsCoreCompetencyId operation.
     * @callback module:api/CoreCompetencyApi~optionsCoreCompetencyIdCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enforce CORS policy.
     * @param {String} employeeId 
     * @param {String} coreCompetencyId 
     * @param {String} authorization 
     * @param {module:api/CoreCompetencyApi~optionsCoreCompetencyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    optionsCoreCompetencyId(employeeId, coreCompetencyId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling optionsCoreCompetencyId");
      }
      // verify the required parameter 'coreCompetencyId' is set
      if (coreCompetencyId === undefined || coreCompetencyId === null) {
        throw new Error("Missing the required parameter 'coreCompetencyId' when calling optionsCoreCompetencyId");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling optionsCoreCompetencyId");
      }

      let pathParams = {
        'employeeId': employeeId,
        'coreCompetencyId': coreCompetencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies/{coreCompetencyId}', 'OPTIONS',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCoreCompetency operation.
     * @callback module:api/CoreCompetencyApi~updateCoreCompetencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CoreCompetency} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update core competency.
     * @param {String} employeeId 
     * @param {String} coreCompetencyId 
     * @param {String} authorization 
     * @param {module:model/CoreCompetency} coreCompetency Body of core competency as an object that needs to be updated to entity CoreCompetency.
     * @param {module:api/CoreCompetencyApi~updateCoreCompetencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CoreCompetency}
     */
    updateCoreCompetency(employeeId, coreCompetencyId, authorization, coreCompetency, callback) {
      let postBody = coreCompetency;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling updateCoreCompetency");
      }
      // verify the required parameter 'coreCompetencyId' is set
      if (coreCompetencyId === undefined || coreCompetencyId === null) {
        throw new Error("Missing the required parameter 'coreCompetencyId' when calling updateCoreCompetency");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateCoreCompetency");
      }
      // verify the required parameter 'coreCompetency' is set
      if (coreCompetency === undefined || coreCompetency === null) {
        throw new Error("Missing the required parameter 'coreCompetency' when calling updateCoreCompetency");
      }

      let pathParams = {
        'employeeId': employeeId,
        'coreCompetencyId': coreCompetencyId
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CoreCompetency;
      return this.apiClient.callApi(
        '/pim-svc/employees/{employeeId}/core-competencies/{coreCompetencyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
