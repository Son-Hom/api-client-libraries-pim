/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EducationSchool from './EducationSchool';

/**
 * The Education model module.
 * @module model/Education
 * @version 1.0.0
 */
class Education {
    /**
     * Constructs a new <code>Education</code>.
     * Represent an education of employee.
     * @alias module:model/Education
     * @param employeeId {String} 
     * @param fromYear {String} 
     * @param toYear {String} 
     * @param degree {String} 
     */
    constructor(employeeId, fromYear, toYear, degree) { 
        
        Education.initialize(this, employeeId, fromYear, toYear, degree);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, employeeId, fromYear, toYear, degree) { 
        obj['EmployeeId'] = employeeId;
        obj['FromYear'] = fromYear;
        obj['ToYear'] = toYear;
        obj['Degree'] = degree;
    }

    /**
     * Constructs a <code>Education</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Education} obj Optional instance to populate.
     * @return {module:model/Education} The populated <code>Education</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Education();

            if (data.hasOwnProperty('EmployeeId')) {
                obj['EmployeeId'] = ApiClient.convertToType(data['EmployeeId'], 'String');
            }
            if (data.hasOwnProperty('FromYear')) {
                obj['FromYear'] = ApiClient.convertToType(data['FromYear'], 'String');
            }
            if (data.hasOwnProperty('ToYear')) {
                obj['ToYear'] = ApiClient.convertToType(data['ToYear'], 'String');
            }
            if (data.hasOwnProperty('School')) {
                obj['School'] = EducationSchool.constructFromObject(data['School']);
            }
            if (data.hasOwnProperty('Degree')) {
                obj['Degree'] = ApiClient.convertToType(data['Degree'], 'String');
            }
            if (data.hasOwnProperty('FieldOfStudy')) {
                obj['FieldOfStudy'] = ApiClient.convertToType(data['FieldOfStudy'], 'String');
            }
            if (data.hasOwnProperty('Major')) {
                obj['Major'] = ApiClient.convertToType(data['Major'], 'String');
            }
            if (data.hasOwnProperty('Achievements')) {
                obj['Achievements'] = ApiClient.convertToType(data['Achievements'], 'String');
            }
            if (data.hasOwnProperty('Remarks')) {
                obj['Remarks'] = ApiClient.convertToType(data['Remarks'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Education</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Education</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Education.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EmployeeId'] && !(typeof data['EmployeeId'] === 'string' || data['EmployeeId'] instanceof String)) {
            throw new Error("Expected the field `EmployeeId` to be a primitive type in the JSON string but got " + data['EmployeeId']);
        }
        // ensure the json data is a string
        if (data['FromYear'] && !(typeof data['FromYear'] === 'string' || data['FromYear'] instanceof String)) {
            throw new Error("Expected the field `FromYear` to be a primitive type in the JSON string but got " + data['FromYear']);
        }
        // ensure the json data is a string
        if (data['ToYear'] && !(typeof data['ToYear'] === 'string' || data['ToYear'] instanceof String)) {
            throw new Error("Expected the field `ToYear` to be a primitive type in the JSON string but got " + data['ToYear']);
        }
        // validate the optional field `School`
        if (data['School']) { // data not null
          EducationSchool.validateJSON(data['School']);
        }
        // ensure the json data is a string
        if (data['Degree'] && !(typeof data['Degree'] === 'string' || data['Degree'] instanceof String)) {
            throw new Error("Expected the field `Degree` to be a primitive type in the JSON string but got " + data['Degree']);
        }
        // ensure the json data is a string
        if (data['FieldOfStudy'] && !(typeof data['FieldOfStudy'] === 'string' || data['FieldOfStudy'] instanceof String)) {
            throw new Error("Expected the field `FieldOfStudy` to be a primitive type in the JSON string but got " + data['FieldOfStudy']);
        }
        // ensure the json data is a string
        if (data['Major'] && !(typeof data['Major'] === 'string' || data['Major'] instanceof String)) {
            throw new Error("Expected the field `Major` to be a primitive type in the JSON string but got " + data['Major']);
        }
        // ensure the json data is a string
        if (data['Achievements'] && !(typeof data['Achievements'] === 'string' || data['Achievements'] instanceof String)) {
            throw new Error("Expected the field `Achievements` to be a primitive type in the JSON string but got " + data['Achievements']);
        }
        // ensure the json data is a string
        if (data['Remarks'] && !(typeof data['Remarks'] === 'string' || data['Remarks'] instanceof String)) {
            throw new Error("Expected the field `Remarks` to be a primitive type in the JSON string but got " + data['Remarks']);
        }

        return true;
    }


}

Education.RequiredProperties = ["EmployeeId", "FromYear", "ToYear", "Degree"];

/**
 * @member {String} EmployeeId
 */
Education.prototype['EmployeeId'] = undefined;

/**
 * @member {String} FromYear
 */
Education.prototype['FromYear'] = undefined;

/**
 * @member {String} ToYear
 */
Education.prototype['ToYear'] = undefined;

/**
 * @member {module:model/EducationSchool} School
 */
Education.prototype['School'] = undefined;

/**
 * @member {String} Degree
 */
Education.prototype['Degree'] = undefined;

/**
 * @member {String} FieldOfStudy
 */
Education.prototype['FieldOfStudy'] = undefined;

/**
 * @member {String} Major
 */
Education.prototype['Major'] = undefined;

/**
 * @member {String} Achievements
 */
Education.prototype['Achievements'] = undefined;

/**
 * @member {String} Remarks
 */
Education.prototype['Remarks'] = undefined;






export default Education;

