/**
 * pim
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EducationSchool from './EducationSchool';

/**
 * The WorkExperience model module.
 * @module model/WorkExperience
 * @version 1.0.0
 */
class WorkExperience {
    /**
     * Constructs a new <code>WorkExperience</code>.
     * Represents work experience of the emaployee.
     * @alias module:model/WorkExperience
     * @param employeeId {String} 
     * @param fromDate {String} 
     * @param toDate {String} 
     * @param salaryType {String} 
     */
    constructor(employeeId, fromDate, toDate, salaryType) { 
        
        WorkExperience.initialize(this, employeeId, fromDate, toDate, salaryType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, employeeId, fromDate, toDate, salaryType) { 
        obj['EmployeeId'] = employeeId;
        obj['FromDate'] = fromDate;
        obj['ToDate'] = toDate;
        obj['SalaryType'] = salaryType;
    }

    /**
     * Constructs a <code>WorkExperience</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkExperience} obj Optional instance to populate.
     * @return {module:model/WorkExperience} The populated <code>WorkExperience</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkExperience();

            if (data.hasOwnProperty('EmployeeId')) {
                obj['EmployeeId'] = ApiClient.convertToType(data['EmployeeId'], 'String');
            }
            if (data.hasOwnProperty('FromDate')) {
                obj['FromDate'] = ApiClient.convertToType(data['FromDate'], 'String');
            }
            if (data.hasOwnProperty('ToDate')) {
                obj['ToDate'] = ApiClient.convertToType(data['ToDate'], 'String');
            }
            if (data.hasOwnProperty('Employer')) {
                obj['Employer'] = EducationSchool.constructFromObject(data['Employer']);
            }
            if (data.hasOwnProperty('PositionTitle')) {
                obj['PositionTitle'] = ApiClient.convertToType(data['PositionTitle'], 'String');
            }
            if (data.hasOwnProperty('PositionLevel')) {
                obj['PositionLevel'] = ApiClient.convertToType(data['PositionLevel'], 'String');
            }
            if (data.hasOwnProperty('BasicSalary')) {
                obj['BasicSalary'] = ApiClient.convertToType(data['BasicSalary'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('SalaryType')) {
                obj['SalaryType'] = ApiClient.convertToType(data['SalaryType'], 'String');
            }
            if (data.hasOwnProperty('SupervisorName')) {
                obj['SupervisorName'] = ApiClient.convertToType(data['SupervisorName'], 'String');
            }
            if (data.hasOwnProperty('DirectSubordinate')) {
                obj['DirectSubordinate'] = ApiClient.convertToType(data['DirectSubordinate'], 'Number');
            }
            if (data.hasOwnProperty('ReasonOfLeaving')) {
                obj['ReasonOfLeaving'] = ApiClient.convertToType(data['ReasonOfLeaving'], 'String');
            }
            if (data.hasOwnProperty('Responsibilities')) {
                obj['Responsibilities'] = ApiClient.convertToType(data['Responsibilities'], 'String');
            }
            if (data.hasOwnProperty('Remarks')) {
                obj['Remarks'] = ApiClient.convertToType(data['Remarks'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkExperience</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkExperience</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WorkExperience.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EmployeeId'] && !(typeof data['EmployeeId'] === 'string' || data['EmployeeId'] instanceof String)) {
            throw new Error("Expected the field `EmployeeId` to be a primitive type in the JSON string but got " + data['EmployeeId']);
        }
        // ensure the json data is a string
        if (data['FromDate'] && !(typeof data['FromDate'] === 'string' || data['FromDate'] instanceof String)) {
            throw new Error("Expected the field `FromDate` to be a primitive type in the JSON string but got " + data['FromDate']);
        }
        // ensure the json data is a string
        if (data['ToDate'] && !(typeof data['ToDate'] === 'string' || data['ToDate'] instanceof String)) {
            throw new Error("Expected the field `ToDate` to be a primitive type in the JSON string but got " + data['ToDate']);
        }
        // validate the optional field `Employer`
        if (data['Employer']) { // data not null
          EducationSchool.validateJSON(data['Employer']);
        }
        // ensure the json data is a string
        if (data['PositionTitle'] && !(typeof data['PositionTitle'] === 'string' || data['PositionTitle'] instanceof String)) {
            throw new Error("Expected the field `PositionTitle` to be a primitive type in the JSON string but got " + data['PositionTitle']);
        }
        // ensure the json data is a string
        if (data['PositionLevel'] && !(typeof data['PositionLevel'] === 'string' || data['PositionLevel'] instanceof String)) {
            throw new Error("Expected the field `PositionLevel` to be a primitive type in the JSON string but got " + data['PositionLevel']);
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['SalaryType'] && !(typeof data['SalaryType'] === 'string' || data['SalaryType'] instanceof String)) {
            throw new Error("Expected the field `SalaryType` to be a primitive type in the JSON string but got " + data['SalaryType']);
        }
        // ensure the json data is a string
        if (data['SupervisorName'] && !(typeof data['SupervisorName'] === 'string' || data['SupervisorName'] instanceof String)) {
            throw new Error("Expected the field `SupervisorName` to be a primitive type in the JSON string but got " + data['SupervisorName']);
        }
        // ensure the json data is a string
        if (data['ReasonOfLeaving'] && !(typeof data['ReasonOfLeaving'] === 'string' || data['ReasonOfLeaving'] instanceof String)) {
            throw new Error("Expected the field `ReasonOfLeaving` to be a primitive type in the JSON string but got " + data['ReasonOfLeaving']);
        }
        // ensure the json data is a string
        if (data['Responsibilities'] && !(typeof data['Responsibilities'] === 'string' || data['Responsibilities'] instanceof String)) {
            throw new Error("Expected the field `Responsibilities` to be a primitive type in the JSON string but got " + data['Responsibilities']);
        }
        // ensure the json data is a string
        if (data['Remarks'] && !(typeof data['Remarks'] === 'string' || data['Remarks'] instanceof String)) {
            throw new Error("Expected the field `Remarks` to be a primitive type in the JSON string but got " + data['Remarks']);
        }

        return true;
    }


}

WorkExperience.RequiredProperties = ["EmployeeId", "FromDate", "ToDate", "SalaryType"];

/**
 * @member {String} EmployeeId
 */
WorkExperience.prototype['EmployeeId'] = undefined;

/**
 * @member {String} FromDate
 */
WorkExperience.prototype['FromDate'] = undefined;

/**
 * @member {String} ToDate
 */
WorkExperience.prototype['ToDate'] = undefined;

/**
 * @member {module:model/EducationSchool} Employer
 */
WorkExperience.prototype['Employer'] = undefined;

/**
 * @member {String} PositionTitle
 */
WorkExperience.prototype['PositionTitle'] = undefined;

/**
 * @member {String} PositionLevel
 */
WorkExperience.prototype['PositionLevel'] = undefined;

/**
 * @member {Number} BasicSalary
 */
WorkExperience.prototype['BasicSalary'] = undefined;

/**
 * @member {String} Currency
 */
WorkExperience.prototype['Currency'] = undefined;

/**
 * @member {String} SalaryType
 */
WorkExperience.prototype['SalaryType'] = undefined;

/**
 * @member {String} SupervisorName
 */
WorkExperience.prototype['SupervisorName'] = undefined;

/**
 * @member {Number} DirectSubordinate
 */
WorkExperience.prototype['DirectSubordinate'] = undefined;

/**
 * @member {String} ReasonOfLeaving
 */
WorkExperience.prototype['ReasonOfLeaving'] = undefined;

/**
 * @member {String} Responsibilities
 */
WorkExperience.prototype['Responsibilities'] = undefined;

/**
 * @member {String} Remarks
 */
WorkExperience.prototype['Remarks'] = undefined;






export default WorkExperience;

